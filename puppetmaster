#!/usr/bin/env ruby

'''
==INTRODUCTION==
This script is meant to be run by munin and has to be symlinked as puppet_client.
It reports the following 4 metrics:
 * Total known clients to the puppetmaster, this can include old and retired hosts
 * The total amount of unique clients that had their configuration compiled in the last 24 hours
 * The total amount of uniquw clients that had their configuration compiled in the last 5 minutes
   * The average compilation time of those configs

Like any munin plugin, this script has 2 commandline options, config and autoconfig.

==HISTORY==
17-04-2011 - Altered the handling of the "last 5 minutes" logs. It now uses Time instead of a regex
15-04-2011 - Initial release
14-04-2011 - Time handling bugfixes
13-04-2011 - This plugin is based on another plugin on munin exchange[1] by "ohadlevy@gmail.com". 

==REQUIREMENTS==
 * Ruby(tested on 1.8.6)

==COPYRIGHT==
The original plugin did not contain any copyright information, assuming public domain.
Copyright Pieter Lexis - Kumina B.V. (pieter@kumina.nl)
This script is licenced under the GNU GPL version 3 or higher

[1] - http://exchange.munin-monitoring.org/plugins/puppetmaster/details
'''
require 'time'

puppet_node = /puppet_node.?$/
puppet_total = /puppet_total.?$/
t = Time.now

def parselogs(since)
  # Assuming puppetmaster logs to syslog and it does not logrotate more than once every 24 hours
  # TODO write syslog handling code to use the logs between 24 hours ago and now
  # XXX Use a syslog parser?
  logfiles = ['/var/log/syslog.1', '/var/log/syslog']

  # setup regex to extract compilation times
  regexp = ".* for (.*) in (.*) seconds"
  count = 0
  total = 0

  logfiles.each do |logfile|
    File.open(logfile).grep(/Compiled configuration|Compiled catalog/).each do |line|
      if Time.parse(line[0..14]) > since and line =~ /#{regexp}/
        total += $2.to_f
        count += 1
      end
    end
  end
  return count, total
end

def count_unique(since)
  # Assuming puppetmaster logs to syslog and it does not logrotate more than once every 24 hours
  # TODO write syslog handling code to use the logs between 24 hours ago and now
  # XXX Use a syslog parser?
  logfiles = ['/var/log/syslog.1', '/var/log/syslog']

  # setup regex to extract compilation times
  regexp = ".* for (.*) in (.*) seconds"

  count = 0
  hosts = Array.new
  logfiles.each do |logfile|
    File.open(logfile).grep(/Compiled configuration|Compiled catalog/).each do |line|
      if Time.parse(line[0..14]) > since and line =~ /#{regexp}/
        unless hosts.include?($1)
          hosts << $1
          count += 1
        end
      end
    end
  end
  return count
end

def count_total
  return Dir.entries('/var/lib/puppet/yaml/facts/').size-2
end

case ARGV[0]
when 'config'
  case $0
  when puppet_total
    puts "graph_title Puppet total nodes"
    puts "graph_vlabel clients"
    puts "known_clients.label Total number of known clients"
    puts "last24h_unique_count.label unique clients in the last 24 hours"
  when puppet_node
    puts "graph_title Puppet nodeconfigs"
    puts "graph_vlabel clients"
    puts "last5m_count.label Unique nodeconfig compilations in tha last 5 minutes"
    puts "last5m_compile_avg.label Average compile time for all nodes in the last 5 minutes"
    puts "last30m_count.label Unique nodeconfig compilations in tha last 30 minutes"
    puts "last30m_compile_avg.label Average compile time for all nodes in the last 30 minutes"
  end
  puts "graph_category puppet"
when 'autoconf'
  case $0
  when puppet_node
    puts "yes"
  when puppet_total
    puts "yes"
  else
    puts "no"
  end
else
  case $0
  when puppet_node
    count5m, total5m = parselogs(t - (60 * 5))
    count30m, total30m = parselogs(t - (60 * 30))
    puts "last5m_count.value #{count5m}"
    puts "last5m_compile_avg.value #{(total5m / count5m).to_s[0..3]}" unless count5m == 0
    puts "last30m_count.value #{count30m}"
    puts "last30m_compile_avg.value #{(total30m / count30m).to_s[0..3]}" unless count30m == 0
  when puppet_total
    t24h = t - (60 * 60 * 24)
    puts "known_clients.value #{count_total()}"
    puts "last24h_unique_count.value #{count_unique(t24h)}"
  end
end
